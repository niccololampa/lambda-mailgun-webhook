AWSTemplateFormatVersion: 2010-09-09
Description: Stack for MailgunWehook GatewayAPI, Lambda, DynamoDB, SNS, IAM, and CodeBuild(CI/CD tracking Github Repo).

# Run S3 Codeformation build before running this

Parameters:
  S3Bucket:
    Type: String
    Default: mailgunwebhookbucket

  S3Key:
    Type: String
    Default: mailgunwebhooklambda.zip

  MailgunSigningKey:
    Type: String
    # add mailgun http webhook signing key here
    NoEcho: true
    MinLength: 1

  SNSSubscriptionEmail:
    Type: String
    # add email here to receive the SNS notification when mailgun webhook is received.
    MinLength: 1

  SNSTopicName:
    Type: String
    Default: MailgunWebhookEvents

  LambdaFuncName:
    Type: String
    Default: MailgunWebhook

  DynamoDBTableName:
    Type: String
    Default: MailgunWebhookEvents

  APIName:
    Type: String
    Default: MailgunWebhook

  APIResourcePath:
    Type: String
    Default: mailgunwebhook

  EnvironmentName:
    Type: String
    Default: dev

  AWSRegionSelected:
    Type: String
    Default: ap-southeast-1

  # *** This value must always be passed in when creating / updating stack
  # "NoEcho" is set to true, for security, so token won't be visible when examining the resulting stack
  GitHubToken:
    Type: String
    NoEcho: true
    MinLength: 1

  # *** The owner of the Github repo for this application.
  GitHubRepoOwner:
    Type: String
    Default: niccololampa

  GitHubRepo:
    Type: String
    Default: mailgun-webhook-aws-api-dynamodb-sns

  GitHubBranch:
    Type: String
    Default: feature/codebuild

  CodeBuildName:
    Type: String
    Default: MailgunWebhookEvents

Resources:
  SNSPublish:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref SNSSubscriptionEmail
          Protocol: email
      TopicName:
        Ref: SNSTopicName

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt IAMRole.Arn
      Environment:
        Variables:
          AWS_REGION_SELECTED: !Ref AWSRegionSelected
          DYNAMO_DB_TABLE_NAME: !Ref DynamoDBTableName
          SIGNING_KEY: !Ref MailgunSigningKey
          SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}
    DependsOn:
      - DynamoDBTable
      - SNSPublish

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: date
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  APIGatewayRestAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name:
        Ref: APIName
      Parameters:
        endpointConfigurationTypes: REGIONAL
    DependsOn:
      - LambdaFunction

  APIGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: APIResourcePath
    DependsOn:
      - APIGatewayRestAPI

  APIGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      - APIGatewayResource

  APIGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod

  APIGatewayPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment

  IAMRole:
    Type: "AWS::IAM::Role"
    DependsOn:
      - SNSPublish
      - DynamoDBTable
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:TagResource"
                  - "dynamodb:UntagResource"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sns:*"
                Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub arn:aws:s3:::${S3Bucket}

  LambdaNodeCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: PolicyCodebuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - codebuild:*
                  - logs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*

  # This resource allows to connect CodeBuild with Github using Personal Access Token.
  CodeBuildSourceCredential:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: !Ref GitHubToken

  LambaNodeCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildName
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubRepoOwner}/${GitHubRepo}.git
        GitCloneDepth: 1
        BuildSpec: buildspec.yml
      SourceVersion: !Ref GitHubBranch
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt LambdaNodeCodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub ${CodeBuildName}-CodeBuild-Logs
    DependsOn:
      - LambdaNodeCodeBuildRole
      - CodeBuildSourceCredential
      - LambdaFunction
